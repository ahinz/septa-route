package org.hinz.septa;

import scala.xml._
import scala.io.Source

class KMLParser {
  val file = XML.loadString(Source.fromFile("/Users/ahinz/Downloads/44.kml").getLines.mkString("\n"))
  
  def coords(xml:NodeSeq) = {
    (xml \\ "coordinates").map(_.text.split(" ").toList.map(llpair => {
      val ll = llpair.split(",")
      if (ll.length == 3) {
        Some((ll(0).toDouble, ll(1).toDouble))
      } else {
        None
      }
    }).flatMap(x => x)).toList
  }

  val pts = coords(file) //splitIntersections(coords(file)).flatMap(x => x)

  def test() = {
    val lines = coords(file)
    lines
  }
}

import swing._
import scala.swing.event._
import java.awt.geom._
import java.awt.Color

class GISPanel(k: KMLParser) extends Panel {
 
  var sel:List[(Double,Double)] = null
  val pts = k.pts
  val lats = pts.flatMap(_.map(_._1))
  val lons = pts.flatMap(_.map(_._2))

  val boundsLat = (lats.max, lats.min)
  val boundsLon = (lons.max, lons.min)

  val xScale:Double = 950.0 //size.width
  val yScale:Double = 550.0 //size.height

  val scaleTransform = AffineTransform.getScaleInstance(
    xScale / (boundsLat._1 - boundsLat._2),
    yScale/ (boundsLon._2 - boundsLon._1))

  val translateTransform = AffineTransform.getTranslateInstance(
    - boundsLat._2,  - boundsLon._1)

  translateTransform.preConcatenate(scaleTransform)

  val transform = translateTransform

  listenTo(mouse.clicks)

  def d(x1: Double, y1:Double, x2:Double, y2: Double) =
    math.sqrt((x1 - x2)*(x1 - x2) + (y1 - y2)*(y1-y2))

  def doClick(p: Point) = {
    val latlon = transform.inverseTransform(p, null)

    // Find nearest point
    val minpt = pts.flatMap(x => x.map(a => (a,d(a._1,a._2, latlon.getX, latlon.getY)))).sortWith(_._2 < _._2).head._1

    // Find that row
    sel = pts.filter(_.contains(minpt)).head

    // Output the index
    println("Selected index: " + pts.indexOf(sel))

    repaint()
  }

  reactions += {
    case MouseClicked(_,p,_,_,_) => doClick(p)
  }

  override def paint(g: Graphics2D) = {

    val colors = List(Color.BLUE,Color.GREEN)

    var k = 0

    val pts2 = List(pts(0),pts(1),pts(3),pts(4),pts(9),pts(8),pts(5),pts(7))

    pts2.map( p => {

      if (p == sel) {
        g.setColor(Color.RED)
      } else {
        g.setColor(colors(k % colors.length))
        k += 1
      }

      p.zip(p.tail).map(p => {
      val px = new Point2D.Double(p._1._1,p._1._2);
      val p1:Point2D = transform.transform(new Point2D.Double(p._1._1,p._1._2), null)
      val p2:Point2D = transform.transform(new Point2D.Double(p._2._1,p._2._2), null)

      g.drawLine(p1.getX.toInt, p1.getY.toInt, p2.getX.toInt, p2.getY.toInt)
      })

      val pt = p.last
      val p1:Point2D = transform.transform(new Point2D.Double(pt._1,pt._2), null)
     
      g.fillOval(p1.getX.toInt, p1.getY.toInt, 5, 5)
    });
  }
}

object HelloWorld extends SimpleSwingApplication {
  def top = new MainFrame {
    size = new java.awt.Dimension(1000,600)
    preferredSize = new Dimension(1000,600)
    title = "Hello, World!"
    contents = new GISPanel(new KMLParser())
  }
}

/*
object Main {

  def main(args: Array[String]) = {
    println(KMLParser.test())

  }
}*/

object T {}
